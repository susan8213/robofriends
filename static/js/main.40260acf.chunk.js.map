{"version":3,"sources":["components/Card.js","components/CardGallery.js","components/SearchBar.js","components/Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardGallery","robots","Fragment","map","user","key","SearchBar","handleSearchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","children","App","useState","setRobots","searchResult","setSearchResult","isLoading","setIsLoading","useEffect","loadData","a","fetch","then","response","json","users","event","keyword","target","value","filterdResult","filter","robot","toLowerCase","includes","color","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sPAiBeA,G,WAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACtB,OACI,yBAAKC,UAAU,+DACX,yBACIC,IAAG,+BAA0BJ,EAA1B,0BACHK,IAAI,MACJF,UAAU,yBAEd,wBAAIA,UAAU,UAAUF,GACxB,wBAAIE,UAAU,mBAAmBD,MCK9BI,EAdK,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACI,kBAAC,IAAMC,SAAP,KACKD,EAAOE,KAAI,SAAAC,GAAI,OACZ,kBAAC,EAAD,CAAMC,IAAKD,EAAKV,GACZA,GAAIU,EAAKV,GACTC,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,aCKjBU,EAbG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBACjB,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,SACpCH,EAAMI,WCoDJC,MAjDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNjB,EADM,KACEkB,EADF,OAE2BD,mBAAS,IAFpC,mBAENE,EAFM,KAEQC,EAFR,OAGqBH,oBAAS,GAH9B,mBAGNI,EAHM,KAGKC,EAHL,KAKbC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAQ,uCAAG,sBAAAC,EAAA,sDACfH,GAAa,GACbI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJZ,EAAUY,GACVV,EAAgBU,MAEpBR,GAAa,GARE,2CAAH,qDAuBd,OACE,yBAAK1B,UAAU,UACb,wBAAIA,UAAU,iBAAd,eACA,kBAAC,EAAD,CAAWU,mBAfY,SAACyB,GAC1BT,GAAa,GAEb,IAAMU,EAAUD,EAAME,OAAOC,MACzBC,EAAgBnC,EAAOoC,QAAO,SAAAC,GAChC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASP,EAAQM,kBAEnDlB,EAAgBe,GAChBb,GAAa,MASTD,EACE,kBAAC,IAAD,CAAczB,UAAU,SAASW,KAAM,UAAWiC,MAAO,UAAW1B,OAAQ,MAAO2B,MAAO,QAE1F,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAazC,OAAQmB,OCrCbuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.40260acf.chunk.js","sourcesContent":["import React from 'react';\nimport \"tachyons\";\n\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className=\"br3 pa3 ma2 tc bg-lightest-blue bw2 ba b--black-10 dib grow\">\n            <img \n                src={`https://robohash.org/${id}?set=set4&size=250x250`}\n                alt=\"Cat\" \n                className=\"br-100 h4 w4 dib pa2\"\n            ></img>\n            <h1 className=\"f3 mb2\">{name}</h1>\n            <h2 className=\"f5 fw4 gray mt0\">{email}</h2>\n        </div>\n    )\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardGallery = ({ robots }) => {\n    return (\n        <React.Fragment>\n            {robots.map(user => (\n                <Card key={user.id} \n                    id={user.id} \n                    name={user.name} \n                    email={user.email} \n                />))}\n        </React.Fragment>\n    )\n    \n}\n\nexport default CardGallery;","import React from \"react\";\n\nconst SearchBar = ({ handleSearchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input \n                className=\"pa3 ba b--lightest-blue bg-white\" \n                type=\"search\"\n                placeholder=\"Search robots\"\n                onChange={handleSearchChange}\n            ></input>\n        </div>\n    );\n}\n\nexport default SearchBar;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', height: '80vh'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React, { useState, useEffect } from \"react\";\nimport ReactLoading from \"react-loading\";\nimport \"tachyons\";\nimport \"./App.css\";\nimport CardGallery from \"./components/CardGallery\";\nimport SearchBar from \"./components/SearchBar\"\nimport Scroll from \"./components/Scroll\"\n\nfunction App() {\n  const [robots, setRobots] = useState([]);\n  const [searchResult, setSearchResult] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    setIsLoading(true);\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => {\n        setRobots(users); \n        setSearchResult(users)\n      });\n    setIsLoading(false);\n  }\n\n  const handleSearchChange = (event) => {\n    setIsLoading(true);\n\n    const keyword = event.target.value;\n    let filterdResult = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(keyword.toLowerCase());\n    })\n    setSearchResult(filterdResult);\n    setIsLoading(false);\n  }\n\n\n  return (\n    <div className=\"App tc\">\n      <h1 className=\"f1 App-header\">RoboFriends</h1>\n      <SearchBar handleSearchChange={handleSearchChange} />\n      {\n        isLoading ? (\n          <ReactLoading className=\"center\" type={\"bubbles\"} color={\"#cdecff\"} height={'10%'} width={'10%'} />\n        ) : (\n          <Scroll>\n            <CardGallery robots={searchResult} />\n          </Scroll>\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}