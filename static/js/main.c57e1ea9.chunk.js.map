{"version":3,"sources":["components/Card.js","components/CardGallery.js","components/SearchBar.js","components/Scroll.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardGallery","robots","Fragment","map","user","key","SearchBar","handleSearchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","children","connect","state","searchField","searchRobots","requestRobots","isPending","error","dispatch","onSearchChange","event","payload","target","value","onRequestRobot","fetch","then","response","json","data","catch","filteredRobots","filter","robot","toLowerCase","includes","useEffect","alert","color","width","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialState","initialStateRobots","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","createLogger","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c57e1ea9.chunk.js","sourcesContent":["import React from 'react';\nimport \"tachyons\";\n\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className=\"br3 pa3 ma2 tc bg-lightest-blue bw2 ba b--black-10 dib grow\">\n            <img \n                src={`https://robohash.org/${id}?set=set4&size=250x250`}\n                alt=\"Cat\" \n                className=\"br-100 h4 w4 dib pa2\"\n            ></img>\n            <h1 className=\"f3 mb2\">{name}</h1>\n            <h2 className=\"f5 fw4 gray mt0\">{email}</h2>\n        </div>\n    )\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardGallery = ({ robots }) => {\n    return (\n        <React.Fragment>\n            {robots.map(user => (\n                <Card key={user.id} \n                    id={user.id} \n                    name={user.name} \n                    email={user.email} \n                />))}\n        </React.Fragment>\n    )\n    \n}\n\nexport default CardGallery;","import React from \"react\";\n\nconst SearchBar = ({ handleSearchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input \n                className=\"pa3 ba b--lightest-blue bg-white\" \n                type=\"search\"\n                placeholder=\"Search robots\"\n                onChange={handleSearchChange}\n            ></input>\n        </div>\n    );\n}\n\nexport default SearchBar;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', height: '80vh'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React, { useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport ReactLoading from \"react-loading\";\nimport \"tachyons\";\nimport \"./App.css\";\nimport CardGallery from \"./components/CardGallery\";\nimport SearchBar from \"./components/SearchBar\"\nimport Scroll from \"./components/Scroll\"\n\nimport { requestRobots, setSearchField } from \"./actions\"\n\n\nfunction App({ onRequestRobot, onSearchChange, robots, searchField, isPending, error }) {\n  const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n  useEffect(() => {\n    onRequestRobot();\n  }, [onRequestRobot]);\n\n  useEffect(() => {\n    if (error) alert(error);\n  }, [error]);\n\n\n  return (\n    <div className=\"App tc\">\n      <h1 className=\"f1 App-header\">RoboFriends</h1>\n      <SearchBar handleSearchChange={onSearchChange} />\n      {\n        isPending ? (\n          <ReactLoading className=\"center\" type={\"bubbles\"} color={\"#cdecff\"} height={'10%'} width={'10%'} />\n        ) : (\n          <Scroll>\n            <CardGallery robots={filteredRobots} />\n          </Scroll>\n        )\n      }\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  onRequestRobot: () => dispatch(requestRobots())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS, \n    REQUEST_ROBOTS_FAILED \n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text,\n});\n\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS, \n    REQUEST_ROBOTS_FAILED \n} from './constants';\n\n\nconst initialState = {\n    searchField: '',\n};\n\n\nexport const searchRobots = (state=initialState, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return {...state, searchField: action.payload}\n        default:\n            return state;\n    }\n};\n\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: '',\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return { ...state, isPending: true }\n        case REQUEST_ROBOTS_SUCCESS:\n            return { ...state, robots: action.payload, isPending: false }\n        case REQUEST_ROBOTS_FAILED:\n            return { ...state, error: action.payload, isPending: false }\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, createLogger()));\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}